@model ViewModels.BillOfMaterial
@{
    ViewBag.Title = "Add";
    Layout = "~/Views/Shared/_Dashboard.cshtml";
    int labelWidthInt = 3;
    int controlWidthInt = 9;
}
@Styles.Render("~/Content/css/customsweetswitcheryselect2css")

<div class="row">
    <div class="col-md-12">
        <ul class="nav nav-tabs navtab-custom">
            <li class="active">
                <a href="#bompanel" data-toggle="tab" aria-expanded="false">
                    <span class="visible-xs"><i class="fa fa-home"></i></span>
                    <span class="hidden-xs">Bill Of Material Info</span>
                </a>
            </li>
            <li class="">
                <a href="#grindingpanel" data-toggle="tab" aria-expanded="false">
                    <span class="visible-xs"><i class="fa fa-user"></i></span>
                    <span class="hidden-xs">Grinding Process Parameters</span>
                </a>
            </li>
            <li class="">
                <a href="#shadepanel" data-toggle="tab" aria-expanded="false">
                    <span class="visible-xs"><i class="fa fa-user"></i></span>
                    <span class="hidden-xs">Shade Matching Parameters</span>
                </a>
            </li>
            <li class="">
                <a href="#labtestingpanel" data-toggle="tab" aria-expanded="false">
                    <span class="visible-xs"><i class="fa fa-user"></i></span>
                    <span class="hidden-xs">Lab Testing Parameters</span>
                </a>
            </li>
            <li class="">
                <a href="#Volumepanel" data-toggle="tab" aria-expanded="false">
                    <span class="visible-xs"><i class="fa fa-user"></i></span>
                    <span class="hidden-xs">Volume Calculation</span>
                </a>
            </li>
            <li class="">
                <a href="#RMCpanel" data-toggle="tab" aria-expanded="false">
                    <span class="visible-xs"><i class="fa fa-user"></i></span>
                    <span class="hidden-xs">RMC Calculation</span>
                </a>
            </li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane active" id="bompanel">
                @using (Html.BeginForm("Add", "BillOfMaterial", FormMethod.Post, new { @class = "form-horizontal m-t-20", @id = "frmBillOfMaterial" }))
                {
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="hori-pass1" class="col-sm-@labelWidthInt control-label">Name</label>
                                <div class="col-sm-@controlWidthInt">
                                    @Html.HiddenFor(x => x.ID, new { @class = "form-control" })
                                    @if (ViewBag.FinishedProductList != null)
                                    {
                                        @Html.DropDownListFor(x => x.ProductID, new SelectList(ViewBag.FinishedProductList, "ID", "Name"), "-- Select Product --", new { @class = "form-control", @placeholder = "Product" })
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(x => x.ProductID, new List<SelectListItem>(), "-- Select Product --", new { @class = "form-control", @placeholder = "Product" })
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="inputEmail3" class="col-sm-@labelWidthInt control-label">Shade</label>
                                <div class="col-sm-@controlWidthInt">
                                    @if (ViewBag.ShadeList != null)
                                    {
                                        @Html.DropDownListFor(x => x.ShadeID, new SelectList(ViewBag.ShadeList, "ShadeID", "ShadeName"), new { @class = "form-control", @placeholder = "Shade" })
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(x => x.ShadeID, new List<SelectListItem>(), new { @class = "form-control", @placeholder = "Shade" })
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="inputEmail3" class="col-sm-@labelWidthInt control-label">Batch Size</label>
                                <div class="col-sm-@controlWidthInt">
                                    @Html.TextBoxFor(x => x.BatchSize, new { @class = "form-control", @placeholder = "Batch Size", @style = "width:70%;float:left" })
                                    @if (ViewBag.UnitList != null)
                                    {
                                        @Html.DropDownListFor(x => x.BatchUnitID, new SelectList(ViewBag.UnitList, "ID", "Name"), new { @class = "form-control", @placeholder = "Select Unit", @style = "width:30%", @disabled = "disabled" })
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(x => x.BatchUnitID, new List<SelectListItem>(), new { @class = "form-control", @placeholder = "Select Unit", @disabled = "disabled" })
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-8">
                            <div class="form-group">
                                <label for="inputEmail3" class="col-sm-1 control-label">Remarks</label>
                                <div class="col-sm-5">
                                    @Html.TextAreaFor(x => x.Remarks, new { @class = "form-control", @placeholder = "Add any remarks here", @rows = "3" })
                                </div>
                                <div class="col-md-3">
                                    <button id="btnLastRevision" type="button" class="btn btn-primary waves-effect waves-light">
                                        <i class="ti-save"></i>&nbsp;&nbsp; Get Last Revision
                                    </button>
                                </div>
                                <div class="col-md-3">
                                    <button id="btnOtherShade" type="button" class="btn btn-primary waves-effect waves-light">
                                        <i class="ti-save"></i>&nbsp;&nbsp; Copy from Other shade
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="inputEmail3" class="col-sm-@labelWidthInt control-label">BOM No</label>
                                <div class="col-sm-@controlWidthInt">
                                    @Html.TextBoxFor(x => x.BOMNo, new { @class = "form-control", @placeholder = "BOM No", @disabled = "disabled" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="inputEmail3" class="col-sm-@labelWidthInt control-label">Revision No</label>
                                <div class="col-sm-@controlWidthInt">
                                    @Html.TextBoxFor(x => x.RevisionNo, new { @class = "form-control", @disabled = "disabled", @placeholder = "Revision No" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="panel panel-border panel-primary">
                                <div class="panel-heading">
                                    <h3 class="panel-title">Add Raw Material List required for this Bill of Material</h3>
                                </div>
                                <div class="panel-body">
                                    @if (Model.details != null)
                                    {
                                        @Html.Partial("_BOMRawMaterials", Model.details)
                                    }
                                    else
                                    {
                                        @Html.Partial("_BOMRawMaterials", new List<ViewModels.BillOfMaterialDetail>())
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-sm-offset-4 col-sm-8">
                            <a href="@Url.Action("Add", "BillOfMaterial", new { ID=0})" i id="btnAdd" type="button" class="btn btn-lg btn-default waves-effect waves-light m-l-5">
                                <i class="ti-plus"></i>&nbsp;&nbsp;Add
                            </a>
                            <button id="btnSave" type="submit" class="btn btn-lg btn-primary waves-effect waves-light">
                                <i class="ti-save"></i>&nbsp;&nbsp; Save
                            </button>
                            <button id="btnDelete" type="button" class="btn btn-lg btn-danger waves-effect waves-light m-l-5">
                                <i class="ti-trash"></i>&nbsp;&nbsp;Delete
                            </button>
                            <button id="btnView" type="button" class="btn btn-lg btn-warning waves-effect waves-light m-l-5">
                                <i class="ti-search"></i>&nbsp;&nbsp;View
                            </button>
                        </div>
                    </div>
                }
            </div>

            <div class="tab-pane" id="grindingpanel">
                <form class="form-horizontal m-t-20">
                    <div class="row">

                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="hori-pass2" class="col-sm-4 control-label">Has Hymenguage</label>
                                <div class="col-sm-7">
                                    @Html.CheckBoxFor(x => x.HasHymenGuage, new { @data_plugin = "switchery", @data_color = "#515ffb", @id = "chkHymenGuage" })
                                    @*<input type="checkbox" id="chkHymenGuage" data-plugin="switchery" data-color="#515ffb" />*@
                                </div>
                            </div>
                        </div>
                        <div class="col-md-8">
                            <div class="form-group">
                                <label for="hori-pass2" class="col-sm-4 control-label">pigment dispersion dupont rub</label>
                                <div class="col-sm-7">
                                    @Html.CheckBoxFor(x => x.HasPigmentDispersion, new { @data_plugin = "switchery", @data_color = "#515ffb", @id = "chkPigment" })
                                    @*<input type="checkbox" id="chkPigment" data-plugin="switchery" data-color="#515ffb" />*@
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row" id="pnlHymenGuageParameters">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label for="inputEmail3" class="col-sm-@labelWidthInt control-label">Enter Min / Max value of HymenGuage</label>
                                <div class="col-sm-@controlWidthInt">
                                    @Html.TextBoxFor(x => x.MinHymenGuage, new { @class = "numeric form-control", @placeholder = "Min", @style = "width: 30%;    float: left;" })
                                    @Html.TextBoxFor(x => x.MaxHymenGuage, new { @class = "numeric form-control", @placeholder = "Max", @style = "width: 30%; float: left; margin-left: 5%;" })
                                    @*<input type="text" id="txtMinHymenGuage" class="numeric form-control" placeholder="Min" style="width: 30%;    float: left;">
                                        <input type="text" id="txtMaxHymenGuage" class="numeric form-control" placeholder="Max" style="width: 30%; float: left; margin-left: 5%;">*@
                                </div>
                            </div>
                        </div>
                    </div>

                </form>
            </div>
            <div class="tab-pane" id="shadepanel">
                <form class="form-horizontal m-t-20">
                    <div class="row">
                        <div class="col-md-5">
                            <div class="form-group">
                                <label for="inputEmail3" class="col-sm-@labelWidthInt control-label">Shade Maching</label>
                                <div class="col-sm-@controlWidthInt">
                                    @{
                                        var ShadeParamList = new List<SelectListItem>();
                                        ShadeParamList.Add(new SelectListItem() { Text = "Master Panel", Value = "1" });
                                        ShadeParamList.Add(new SelectListItem() { Text = "Last Supply", Value = "2" });
                                    }
                                    @Html.DropDownListFor(x => x.ShadeMaching, new SelectList(ShadeParamList, "Value", "Text", Model.ShadeMaching), new { @class = "form-control", @id = "ddlShadeParameter" })
                                    @*<select id="ddlShadeParameter" class="form-control">
                                            <option value="1">Master Panel</option>
                                            <option value="2">Last Supply</option>
                                        </select>*@
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row" id="shadeOptional">
                        <div class="col-md-5">
                            <div class="form-group">
                                <label for="inputEmail3" class="col-sm-@labelWidthInt control-label">Panel Number</label>
                                <div class="col-sm-@controlWidthInt">
                                    @Html.TextBoxFor(x => x.PanelNumber, new { @placeholder = "Panel Number", @class = "form-control", @id = "txtPanelNumber" })
                                    @*<input type="text" id="txtPanelNumber" placeholder="Panel Number" class="form-control" />*@
                                </div>
                            </div>
                        </div>
                        <div class="col-md-5">
                            <div class="form-group">
                                <label for="inputEmail3" class="col-sm-@labelWidthInt control-label">Rack Number</label>
                                <div class="col-sm-@controlWidthInt">
                                    @Html.TextBoxFor(x => x.RackNumber, new { @placeholder = "Rack Number", @class = "form-control", @id = "txtRackNumber" })
                                    @*<input type="text" class="form-control" id="txtRackNumber" placeholder="Rack Number" />*@
                                </div>
                            </div>
                        </div>
                    </div>

                </form>

            </div>
            <div class="tab-pane" id="labtestingpanel">
                @Html.Partial("_BOMLabParameters", Model)
            </div>
            <div class="tab-pane" id="Volumepanel">
                <div class="row">
                    <div class="col-md-12">
                        <table id="tblRMC" class="table table-striped table-bordered"></table>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="inputEmail3" class="col-sm-@labelWidthInt control-label">Pigment %</label>
                            <div class="col-sm-@controlWidthInt">
                                <input type="text" class="numeric form-control" id="PigmentPercentage" disabled />
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="inputEmail3" class="col-sm-@labelWidthInt control-label">Binder %</label>
                            <div class="col-sm-@controlWidthInt">
                                <input type="text" class="numeric form-control" id="BinderPercentage" disabled />
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="inputEmail3" class="col-sm-@labelWidthInt control-label">Total Solid %</label>
                            <div class="col-sm-@controlWidthInt">
                                <input type="text" class="numeric form-control" id="TotalSolidPercentage" disabled />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="inputEmail3" class="col-sm-@labelWidthInt control-label">Volume Solid %</label>
                            <div class="col-sm-@controlWidthInt">
                                <input type="text" class="numeric form-control" id="VolumeSolidPercentage" disabled />
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="inputEmail3" class="col-sm-@labelWidthInt control-label">PVC</label>
                            <div class="col-sm-@controlWidthInt">
                                <input type="text" class="numeric form-control" id="PVC" disabled />
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="inputEmail3" class="col-sm-@labelWidthInt control-label">P/B Ratio</label>
                            <div class="col-sm-@controlWidthInt">
                                <input type="text" class="numeric form-control" id="PBRatio" disabled />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="inputEmail3" class="col-sm-@labelWidthInt control-label">WPL</label>
                            <div class="col-sm-@controlWidthInt">
                                @Html.TextBoxFor(x => x.WPL, new { @placeholder = "WPL", @class = "form-control", @disabled = "disabled" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="inputEmail3" class="col-sm-@labelWidthInt control-label">LOSS</label>
                            <div class="col-sm-@controlWidthInt">
                                @Html.TextBoxFor(x => x.Loss, new { @class = "numeric form-control", @id = "Loss" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="tab-pane" id="RMCpanel">

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="inputEmail3" class="col-sm-@labelWidthInt control-label">RMC / KG</label>
                            <div class="col-sm-@controlWidthInt">
                                <input type="text" class="numeric form-control" id="RMCKG" disabled />
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="inputEmail3" class="col-sm-@labelWidthInt control-label">RMC / LTR</label>
                            <div class="col-sm-@controlWidthInt">
                                <input type="text" class="numeric form-control" id="RMCLTR" disabled />
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

<div id="custom-modal" class="modal-demo">
    <button type="button" class="close" onclick="Custombox.close();">
        <span>&times;</span><span class="sr-only">Close</span>
    </button>
    <h4 class="custom-modal-title">Bill Of Material</h4>
    <div class="custom-modal-text" id="AllBillOfMaterial" style="max-height:500px;overflow:auto;">

    </div>
</div>

<div id="othershade-modal" class="modal-demo">
    <button type="button" class="close" onclick="Custombox.close();">
        <span>&times;</span><span class="sr-only">Close</span>
    </button>
    <h4 class="custom-modal-title">Select Options for Last Reivision</h4>
    <div class="custom-modal-text" id="AllRevision" style="max-height:500px;overflow:auto;">
        <form class="form-horizontal m-t-20">
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="inputEmail3" class="col-sm-@labelWidthInt control-label">Shade</label>
                        <div class="col-sm-@controlWidthInt">
                            <select class="form-control" id="ddlOtherShade"></select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="inputEmail3" class="col-sm-@labelWidthInt control-label">Revision No</label>
                        <div class="col-sm-@controlWidthInt">
                            <input type="text" id="OtherRevisionNo" class="numeric form-control" placeholder="Revision No" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <button id="btnGetVersion" type="button" class="btn btn-primary waves-effect waves-light">
                        <i class="ti-save"></i>&nbsp;&nbsp; Get Raw Material Details
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>
@Scripts.Render("~/Content/css/customsweetswitcheryselect2js")

<script>
    function BillOfMaterialAdded(response) {
        swal({
            title: "Information",
            text: "Bill Of Material is saved successfully.",
            type: "success"
        }, function () {
            $('#btnAdd')[0].click();
        });
    }
    var blackRawMaterialRow = "";
    var changedDDL = "";
    var currentRow;
    function CalculateRawMaterialTotal() {
        $(currentRow).find('td:eq(7) input').val(GetNumericValue($(currentRow).find('td:eq(4) input').val()) * GetNumericValue($(currentRow).find('td:eq(6) input').val()));
    }

    function CalculateGrandTotals() {
        var totalQty = 0, totalVolume = 0, totalTotal = 0, totalBinderSolid = 0, totalVolumeSolid = 0;
        $.each($('#tblRawMaterial tbody tr'), function (index, element) {
            totalQty += parseFloat(GetNumericValue($(element).find('td:eq(3) input').val()));
            totalVolume += parseFloat(GetNumericValue($(element).find('td:eq(5) input').val()));
            totalBinderSolid += parseFloat(GetNumericValue($(element).find('td:eq(7) input').val()));
            totalVolumeSolid += parseFloat(GetNumericValue($(element).find('td:eq(9) input').val()));
            totalTotal += parseFloat(GetNumericValue($(element).find('td:eq(11) input').val()));
        });
        $('#tblRawMaterial tfoot tr td:eq(3)').text(isNaN(totalQty) ? 0 : totalQty.toFixed(2));
        $('#tblRawMaterial tfoot tr td:eq(5)').text(isNaN(totalVolume) ? 0 : totalVolume.toFixed(2));
        $('#tblRawMaterial tfoot tr td:eq(7)').text(isNaN(totalBinderSolid) ? 0 : totalBinderSolid.toFixed(2));
        $('#tblRawMaterial tfoot tr td:eq(9)').text(isNaN(totalVolumeSolid) ? 0 : totalVolumeSolid.toFixed(2));
        $('#tblRawMaterial tfoot tr td:eq(11)').text(isNaN(totalTotal) ? 0 : totalTotal.toFixed(2));
        var totalPigmentPercentage = 0;
        $.each($('#tblRawMaterial tbody tr').filter(function (index, item) { return $(item).data('productid') == 1 }), function (index, element) {
            totalPigmentPercentage += GetNumericValue($(element).find('td:eq(7) input').val());
        });
        var totalBinderPercentage = 0;
        $.each($('#tblRawMaterial tbody tr').filter(function (index, item) { return $(item).data('productid') == 2 }), function (index, element) {
            totalBinderPercentage += GetNumericValue($(element).find('td:eq(9) input').val());
        });
        $('#TotalSolidPercentage').val(isNaN(totalBinderSolid) ? 0 : totalBinderSolid.toFixed(2));
        var perVolume = (totalVolumeSolid / totalVolume) * 100;
        $('#VolumeSolidPercentage').val(isNaN(perVolume) ? 0 : perVolume.toFixed(2));
        var totalPVC = 0;
        $.each($('#tblRawMaterial tbody tr').filter(function (index, item) { return $(item).data('productid') == 1 }), function (index, element) {
            totalPVC += GetNumericValue($(element).find('td:eq(9) input').val());
        });
        totalPVC = (totalPVC / totalVolumeSolid) * 100;
        $('#PVC').val(isNaN(totalPVC) ? 0 : totalPVC.toFixed(2));

        $('#BinderPercentage').val(isNaN(totalBinderPercentage) ? 0 : totalBinderPercentage.toFixed(2));
        $('#PigmentPercentage').val(isNaN(totalPigmentPercentage) ? 0 : totalPigmentPercentage.toFixed(2));
        var pbRatio = totalPigmentPercentage / totalBinderPercentage;
        $('#PBRatio').val(isNaN(pbRatio) || !isFinite(pbRatio) ? 0 : pbRatio.toFixed(2));
        var wpl = totalQty / totalVolume;
        $('#WPL').val(isNaN(wpl) ? 0 : wpl.toFixed(2));
        if ($('#Loss').val().length > 0) {
            var rmckg = totalTotal / (totalQty - GetNumericValue($('#Loss').val()));
            $('#RMCKG').val(isNaN(rmckg) ? 0 : rmckg.toFixed(2));
            var rmcltr = rmckg * wpl;
            $('#RMCLTR').val(isNaN(rmcltr) ? 0 : rmcltr.toFixed(2));
        }
        $('#TotalSolidPercentage').val(isNaN(totalBinderSolid) ? 0 : totalBinderSolid.toFixed(2));
    }

    function BillOfMaterialAdded(response) {
        swal({
            title: "Information",
            text: "Bill of material is saved successfully.",
            type: "success"
        }, function () {
            $('#btnAdd')[0].click();
        });
    }

    var currParameter = "";
    $(document).ready(function () {
        if ('@ViewBag.UserType'.toUpperCase() == '1') {
            $('a[href="#RMCpanel"]').parent().show();
        }
        else {
            $('a[href="#RMCpanel"]').parent().hide();
        }
        $('#Loss').on('change', function () {
            CalculateGrandTotals();
        });

        $('body').on('click', '#tblLabParameter tbody tr', function () {
            currParameter = this;
        });

        $('body').on('click', '#tblLabParameter tbody tr td:nth-child(1) button', function () {
            swal({
                title: "Are you sure want to remove this parameter?",
                text: "You will not be able to recover currently entered parameter values!",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Yes, delete it!",
                cancelButtonText: "No, cancel plz!",
                closeOnConfirm: true,
                closeOnCancel: true
            }, function (isConfirm) {
                if (isConfirm) {
                    $(currParameter).remove();
                } else {
                    swal("Cancelled", "Parameter is safe :)", "error");
                }
            });
        });
        $('#BOMNo').val("Default");
        $.each($('#tblRawMaterial tr'), function (index, element) {
            $(this).find('td:gt(3)').hide();
        });
        $('a[href="#Volumepanel"]').on('click', function () {
            $('#tblRMC').html($('#tblRawMaterial').clone().removeAttr('id'));
            $('#tblRMC input,#tblRMC select').attr('disabled', 'disabled');
            $.each($('#tblRMC tr'), function (index, element) {
                $(this).find('td:gt(3)').show();
                if ($(this).parent()[0].tagName == "TBODY") {
                    $(this).find('td:eq(0) select').val($('#tblRawMaterial tr:eq(' + index + ') td:eq(0) select').val());
                    $(this).find('td:eq(1) select').val($('#tblRawMaterial tr:eq(' + index + ') td:eq(1) select').val());
                }

            });
        });
        $('#ddlShadeParameter').on('change', function () {
            if ($(this).val() == "1") {
                $('#shadeOptional').show();
            }
            else {
                $('#shadeOptional').hide();
            }
        });
        $('#ddlShadeParameter').change();
        $('#chkHymenGuage').on('change', function () {
            if ($(this).is(':checked')) {
                $('#pnlHymenGuageParameters').show();
            }
            else {
                $('#pnlHymenGuageParameters').hide();
            }
        });
        $('#chkHymenGuage').change();
        $('#btnGetVersion').on('click', function () {
            if ($('#ddlOtherShade').val() == "" || $('#OtherRevisionNo').val() == "") {
                swal({
                    title: "Oppsss",
                    text: 'Please select Shade and Revision number both.',
                    type: "error"
                }, function () {

                });
            }
            else {
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("GetRawMaterialDetails", "BillOfMaterial")",
                    data: { ProductID: $('#ProductID').val(), ShadeID: $('#ddlOtherShade').val(), RevisionNo: $('#OtherRevisionNo').val() },
                    success: function (response) {
                        if (response && response != null && response.IsSuccess == true) {
                            if (response.ResponseValue.RMData.length > 0) {
                                $('#tblRawMaterial').parent().html(response.ResponseValue.RMData);
                            }
                            if (response.ResponseValue.LABData.length > 0) {
                                $('#labtestingpanel').html(response.ResponseValue.LABData);
                            }
                            $('#tblRawMaterial tbody tr td:nth-child(2) select').change();

                            $.each($('#tblRawMaterial tr'), function (index, element) {
                                $(this).find('td:gt(3)').hide();
                            });
                            CalculateGrandTotals();
                            Custombox.close();
                        }
                        else {
                            $.Notification.notify('black', 'top right', 'Raw Material Details is not present with given details.', '');
                        }
                    }
                });
            }
        });

        $('#frmBillOfMaterial').validate({
            rules: {
                ProductID: {
                    required: true
                },
                ShadeID: {
                    required: true
                },
                BatchSize: {
                    required: true
                }
            },
            messages: {
                ProductID: {
                    required: "Please select product"
                },
                ShadeID: {
                    required: "Please select Shade."
                },
                BatchSize: {
                    number: "Please enter Batch Size.",
                },
                submitHandler: function (form) {
                    return false;
                }
            }
        });
        $('#btnSave').on('click', function () {

            if ($('#frmBillOfMaterial').valid()) {
                if ($('#tblRawMaterial tbody tr').length == 1 && $('#tblRawMaterial tbody tr:last').html() == blackRawMaterialRow[0].innerHTML) {
                    swal({
                        title: "Oppsss",
                        text: 'Please enter proper raw material detail and then try to save record.',
                        type: "error"
                    }, function () {

                    });
                    return false;
                }
                if ($('#tblLabParameter tbody tr').length == 0) {
                    swal({
                        title: "Oppsss",
                        text: 'Please enter proper detail in Lab Parameters.',
                        type: "error"
                    }, function () {
                        $('a[href="#labtestingpanel"]').click();
                    });
                }

                if ($('#tblLabParameter tbody tr input').filter(function () { return $(this).val() == ""; }).length > 0) {
                    swal({
                        title: "Oppsss",
                        text: 'Please enter Values in all lab parameters or delete them if you don\'t want to use them for this bill of material.',
                        type: "error"
                    }, function () {
                        $('a[href="#labtestingpanel"]').click();
                    });
                    return false;
                }
                var isSuccess = true;
                $.each($('#tblLabParameter tbody tr'), function (index, element) {
                    if ($(this).find('td:eq(3) input').length == 3) {
                        if ($(this).find('td:eq(3) input[placeholder="Min"]').val() > $(this).find('td:eq(3) input[placeholder="Max"]').val()) {
                            swal({
                                title: "Oppsss",
                                text: 'Min value can not be greater then max value.',
                                type: "error"
                            }, function () {
                                $('a[href="#labtestingpanel"]').click();
                            });
                            isSuccess = false;
                            return false;
                        }
                    }
                });
                if (!isSuccess) {
                    return false;
                }
                if ($('#tblRawMaterial tfoot tr:eq(0) td:eq(3)').text().trim() != "100.00") {
                    swal({
                        title: "Oppsss",
                        text: 'Total Raw Material Qty should match to 100 in order to save this bill of material.',
                        type: "error"
                    }, function () {

                    });
                    return false;
                }
                debugger;
                var billOfMaterial = {};
                var detail = [];
                var labParameters = [];
                $.each($('#tblRawMaterial tbody tr:not(:last-child)'), function () {
                    var detailRow = {};
                    detailRow.ProcessID = $(this).find('td:eq(0) select').val();
                    detailRow.ProductID = $(this).find('td:eq(1) select').val();
                    detailRow.QtyKG = $(this).find('td:eq(3) input').val();
                    detail.push(detailRow);
                });
                $.each($('#tblLabParameter tbody tr'), function () {
                    var param = {};
                    param.ParameterID = $(this).find('td:eq(1)').data('parameterid');
                    if ($(this).find('td:eq(2) input').length > 1) {
                        param.Min = $(this).find('td:eq(2) input')[0].value;
                        param.Max = $(this).find('td:eq(2) input')[1].value;
                        param.Unit = $(this).find('td:eq(2) input')[2].value;
                    }
                    else {
                        param.Standard = $(this).find('td:eq(2) input')[0].value;
                    }
                    labParameters.push(param);
                });
                billOfMaterial.ProductID = $('#ProductID').val();
                billOfMaterial.ShadeID = $('#ShadeID').val();
                billOfMaterial.BatchUnitID = $('#BatchUnitID').val();
                billOfMaterial.BatchSize = $('#BatchSize').val();
                billOfMaterial.BOMNo = $('#BOMNo').val();
                billOfMaterial.RevisionNo = $('#RevisionNo').val();
                billOfMaterial.Remarks = $('#Remarks').val();
                billOfMaterial.HasHymenGuage = $('#chkHymenGuage').is(':checked');
                billOfMaterial.MinHymenGuage = $('#MinHymenGuage').val();
                billOfMaterial.MaxHymenGuage = $('#MaxHymenGuage').val();
                billOfMaterial.HasPigmentDispersion = $('#chkPigment').is(':checked');
                billOfMaterial.ShadeMaching = $('#ddlShadeParameter').val();
                billOfMaterial.PanelNumber = $('#txtPanelNumber').val();
                billOfMaterial.RackNumber = $('#txtRackNumber').val();
                billOfMaterial.Loss = $('#Loss').val();
                billOfMaterial.WPL = $('#WPL').val();
                billOfMaterial.details = detail;
                billOfMaterial.labParameters = labParameters;
                $.ajax({
                    url: "@Url.Action("Add","BillOfMaterial")",
                    type: "POST",
                    data: JSON.stringify(billOfMaterial),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        if (response.IsSuccess) {
                            BillOfMaterialAdded();
                        }
                        else {
                            swal("OOpsss", "There is some problem while saving data, Please try after sometime.", "error");
                        }
                    }
                });
            }
            else {
                $('#frmBillOfMaterial').validate();
            }
            return false;
        });

        $('#btnOtherShade').on('click', function () {
            if ($('#ProductID').val() == "" || $('#ShadeID').val() == "") {
                swal({
                    title: "Oppsss",
                    text: 'Please select Product and Shade first.',
                    type: "error"
                }, function () {

                });
            }
            else {
                Custombox.open({
                    animation: 'rotatedown',
                    plugin: 'custommodal',
                    overlayspeed: '100',
                    overlaycolor: '#36404a',
                    target: '#othershade-modal'
                });
            }
        });
        $('#btnLastRevision').on('click', function () {
            if ($('#ProductID').val() == "" || $('#ShadeID').val() == "") {
                swal({
                    title: "Oppsss",
                    text: 'Please select Product and Shade first.',
                    type: "error"
                }, function () {

                });
                return false;
            }
            if (parseInt($('#RevisionNo').val()) <= 1) {
                swal({
                    title: "Oppsss",
                    text: 'There is no previos revision present for selected product and shade.',
                    type: "error"
                }, function () {

                });
                return false;
            }
            swal({
                title: "Are you sure want to get last version of selected product and shade?",
                text: "You will not be able to recover currently entered entries!",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Yes, get it!",
                cancelButtonText: "No, cancel plz!",
                closeOnConfirm: true,
                closeOnCancel: false
            }, function (isConfirm) {
                if (isConfirm) {
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("GetLastRevision", "BillOfMaterial")",
                        data: { ProductID: $('#ProductID').val(), ShadeID: $('#ShadeID').val() },
                        success: function (response) {
                            if (response && response != null && response.length > 0) {
                                $('#tblRawMaterial').parent().html(response);
                                $('#tblRawMaterial tbody tr td:nth-child(2) select').change();
                                $.each($('#tblRawMaterial tr'), function (index, element) {
                                    $(this).find('td:gt(3)').hide();
                                });
                                CalculateGrandTotals();
                            }
                        }
                    });
                } else {
                    swal("Cancelled", "Current entries are safe :)", "error");
                }
            });
        });
        $('#StandardLossPercentage,#Processing').on('change', function () {
            CalculateGrandTotals();
        });
        blackRawMaterialRow = $('#tblRawMaterial tbody tr:last');
        $('body').on('focus', '#tblRawMaterial tbody tr', function () {
            currentRow = this;
        });
        $('body').on('change', '#tblRawMaterial tbody tr td:nth-child(1) select', function () {
            if ($(this).val().length > 0 && $('#tblRawMaterial tbody tr:last').index() == $(this).parent().parent().index()) {
                $('#tblRawMaterial tbody').append(blackRawMaterialRow[0].outerHTML);
            }
        });
        $('body').on('blur', '[data-qtykg]', function () {
            $(this).val(parseFloat($(this).val()).toFixed(3));
        });
        $('body').on('change', '#tblRawMaterial tbody tr td:nth-child(4) input', function () {

            $(currentRow).find('td:eq(5) input').val((GetNumericValue($(currentRow).find('td:eq(3) input').val()) / GetNumericValue($(currentRow).find('td:eq(4) input').val())).toFixed(2));
            $(currentRow).find('td:eq(7) input').val(((GetNumericValue($(currentRow).find('td:eq(3) input').val()) * GetNumericValue($(currentRow).find('td:eq(6) input').val())) / 100).toFixed(2));
            $(currentRow).find('td:eq(9) input').val((GetNumericValue($(currentRow).find('td:eq(7) input').val()) / GetNumericValue($(currentRow).find('td:eq(8) input').val())).toFixed(2));
            $(currentRow).find('td:eq(11) input').val((GetNumericValue($(currentRow).find('td:eq(3) input').val()) * GetNumericValue($(currentRow).find('td:eq(10) input').val())).toFixed(2));
            CalculateGrandTotals();
        });
        $('body').on('change', '#tblRawMaterial tbody tr td:nth-child(3) select', function () {
            $(this).parent().parent().find('td:eq(1) select').val($(this).val());
            $(this).parent().parent().find('td:eq(1) select').change();
        });
        $('body').on('change', '#tblRawMaterial tbody tr td:nth-child(2) select', function () {
            $(this).parent().parent().find('td:eq(2) select').val($(this).val());
            changedDDL = this;
            if ($(this).val() != "") {
                $.ajax({
                    async: false,
                    type: "POST",
                    url: "@Url.Action("GetProductSalesRateAndGravity", "BillOfMaterial")",
                    data: { ProductID: $(this).val() },
                    success: function (response) {
                        if (response.IsSuccess == true) {
                            if (currentRow || currentRow == null) {
                                currentRow = $(changedDDL).parent().parent();
                            }
                            $(currentRow).find('td:eq(4) input').val(response.ResponseValue.Gravity);
                            $(currentRow).find('td:eq(6) input').val(response.ResponseValue.SPercentage);
                            $(currentRow).find('td:eq(8) input').val(response.ResponseValue.SG);
                            $(currentRow).find('td:eq(10) input').val(response.ResponseValue.PR);
                            $(currentRow).attr('data-productid', response.ResponseValue.RawMaterialType);
                            if ($(currentRow).find('td:eq(3) input').val().toString().length > 0) {
                                $(currentRow).find('td:eq(3) input').change();
                            }
                        }
                    }
                });
            }
        });
        $('#BatchSize').on('blur', function () {
            if ($(this).data('minbatch') &&
                $(this).data('maxbatch') &&
                (parseFloat($(this).val()) < parseFloat($(this).data('minbatch')) ||
                parseFloat($(this).val()) > parseFloat($(this).data('maxbatch')))) {
                swal({
                    title: "Oppsss",
                    text: 'Value can not be less then ' + $(this).data('minbatch') + ' and greater then ' + $(this).data('maxbatch') + '.',
                    type: "error"
                }, function () {
                    $('#BatchSize').val($('#BatchSize').data('idealbatch'));
                });
            }
        });
        $('#ShadeID').on('change', function () {
            $('#ddlOtherShade option[value="' + $('#ShadeID').val() + '"]').siblings().show();
            $('#ddlOtherShade option[value="' + $('#ShadeID').val() + '"]').hide();
            $.ajax({
                type: "POST",
                url: "@Url.Action("GetRevisionNo", "BillOfMaterial")",
                data: { ProductID: $('#ProductID').val(), ShadeID: $('#ShadeID').val() },
                success: function (response) {
                    if (response.IsSuccess == true) {
                        $('#RevisionNo').val(response.ResponseValue);
                    }
                }
            });
        });
        $('#ProductID').on('change', function () {
            $.ajax({
                type: "POST",
                url: "@Url.Action("GetProductShadesAndBatchSize", "BillOfMaterial")",
                data: { ProductID: $('#ProductID').val() },
                success: function (response) {
                    if (response.IsSuccess == true) {
                        $('#ShadeID').html("");
                        strShade = '<option value="">-- Select Shade --</option>';
                        $.each(response.ResponseValue.Shades, function (index, element) {
                            strShade += '<option value="' + element.ID + '">' + element.Name + '</option>';
                        });
                        $('#ShadeID').html(strShade);
                        $('#ddlOtherShade').html(strShade);
                        $('#BatchSize').val(response.ResponseValue.BatchSize.Ideal);
                        $('#BatchSize').attr('data-minBatch', response.ResponseValue.BatchSize.Min);
                        $('#BatchSize').attr('data-maxBatch', response.ResponseValue.BatchSize.Max);
                        $('#BatchSize').attr('data-idealBatch', response.ResponseValue.BatchSize.Ideal);
                        $('#BatchUnitID').val(response.ResponseValue.ProductUnit);
                    }
                }
            });
        });
        $('#frmBillOfMaterial').validate({
            rules: {
                Name: {
                    required: true,
                    remote: {
                        url: '@Url.Action("CheckDuplicateName", "BillOfMaterial")',
                        data: { ID: $('#ID').val() },
                        type: "POST"
                    }
                },
                ConversionFactorWithLtr: {
                    number: true,
                    required: true
                }
            },
            messages: {
                Name: {
                    required: "Please enter Name",
                    remote: "Packing name is already entered, Please enter another packing name."
                },
                ConversionFactorWithLtr: {
                    required: "Please enter Conversion Factor with litter",
                    number: "Please enter numbers only."
                }
            },
            submitHandler: function (form) {
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("Add", "BillOfMaterial")",
                    data: $('#frmBillOfMaterial').serialize(),
                    success: function (response) {
                        BillOfMaterialAdded();
                    }
                });
                return false;
            }
        });
        $('#btnView').click(function () {
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetAll", "BillOfMaterial")",
                success: function (response) {
                    $('#AllBillOfMaterial').html(response);
                    Custombox.open({
                        animation: 'rotatedown',
                        plugin: 'custommodal',
                        overlayspeed: '100',
                        overlaycolor: '#36404a',
                        target: '#custom-modal'
                    });
                    $('body').on('dblclick', '#tblBillOfMaterial tbody tr', function () {
                        window.location.href = '@Url.Action("Add", "BillOfMaterial", new { Id = "REPLACE" })'.replace('REPLACE', $(this).data('empid'));
                    });
                }
            });

        });
        $('#btnDelete').click(function () {
            if ($('#ID').val() == "0") {
                swal("Please select any record First!", "In order to delete Bill Of Material, You need to select an Bill Of Material first.")
            }
            else {
                swal({
                    title: "Are you sure want to delete this Bill Of Material?",
                    text: "You will not be able to recover this record!",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Yes, delete it!",
                    cancelButtonText: "No, cancel plz!",
                    closeOnConfirm: false,
                    closeOnCancel: false
                }, function (isConfirm) {
                    if (isConfirm) {
                        $.ajax({
                            type: "GET",
                            url: "@Url.Action("Delete", "BillOfMaterial")",
                            data: { ID: $('#ID').val() },
                            success: function (response) {
                                if (response.IsSuccess == true) {
                                    swal({
                                        title: "Deleted!",
                                        text: "Bill Of Material is deleted Successfully.",
                                        type: "success"
                                    }, function () {
                                        $('#btnAdd')[0].click();
                                    });
                                }
                                else {
                                    swal("Opssss!", "Something seems wrong while deleting Bill Of Material.", "error");
                                }
                            }
                        });

                    } else {
                        swal("Cancelled", "Bill Of Material is safe :)", "error");
                    }
                });
            }
        });
        if (parseInt($('#ID').val()) > 0) {
            $('#tblRawMaterial tbody tr td:nth-child(2) select').change();
        }
    });
</script>
