@model ViewModels.Employee

@{
    ViewBag.Title = "Add Employee";
    Layout = "~/Views/Shared/_Dashboard.cshtml";
}
@Styles.Render("~/Content/css/customsweetcss")
<div class="row">
    <div class="col-lg-offset-2 col-lg-8">
        <div class="card-box">
            <h4 class="m-t-0 header-title"><b>Employee Master</b></h4>
            <p class="text-muted font-13 m-b-30">
                Add/Edit Employee here
            </p>
            @using (Ajax.BeginForm("Add", "Employee", new AjaxOptions { OnSuccess = "EmployeeAdded()" }, new { @class = "form-horizontal m-t-20", @id = "frmEmployee" }))
            {
                <form class="form-horizontal" role="form" data-parsley-validate novalidate>
                    <div class="form-group">
                        <label for="inputEmail3" class="col-sm-4 control-label">Full Name</label>
                        <div class="col-sm-7">
                            @Html.HiddenFor(x => x.ID, new { @class = "form-control", @placeholder = "Username" })
                            @Html.TextBoxFor(x => x.Name, new { @class = "form-control", @placeholder = "Full Name" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="hori-pass1" class="col-sm-4 control-label">Email Id</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(x => x.EmailId, new { @type = "email", @class = "form-control", @placeholder = "Email Address" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="hori-pass2" class="col-sm-4 control-label">Mobile Number</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(x => x.MobileNo, new { @class = "form-control", @placeholder = "Mobile No" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="webSite" class="col-sm-4 control-label">User Name</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(x => x.UserName, new { @class = "form-control", @placeholder = "Username" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="webSite" class="col-sm-4 control-label">Password</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(x => x.Password, new { @type = "password", @class = "form-control", @placeholder = "Password" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="hori-pass2" class="col-sm-4 control-label">Confirm Password</label>
                        <div class="col-sm-7">
                            <input type="password" placeholder="Confirm Password" class="form-control" name="ConfirmPassword">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="webSite" class="col-sm-4 control-label">Type</label>
                        <div class="col-sm-7">
                            @Html.DropDownListFor(x => x.Type, new SelectList(ViewBag.EmployeeTypes, "ID", "Type"), new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-offset-4 col-sm-8">
                            <a href="@Url.Action("Add", "Employee", new { ID=0})" id="btnAdd" type="button" class="btn btn-lg btn-default waves-effect waves-light m-l-5">
                                <i class="ti-plus"></i>&nbsp;&nbsp;Add
                            </a>
                            <button id="btnSave" type="submit" class="btn btn-lg btn-primary waves-effect waves-light">
                                <i class="ti-save"></i>&nbsp;&nbsp; Save
                            </button>
                            <button id="btnDelete" type="button" class="btn btn-lg btn-danger waves-effect waves-light m-l-5">
                                <i class="ti-trash"></i>&nbsp;&nbsp;Delete
                            </button>
                            <button id="btnView" type="button" class="btn btn-lg btn-warning waves-effect waves-light m-l-5">
                                <i class="ti-search"></i>&nbsp;&nbsp;View
                            </button>
                        </div>
                    </div>
                </form>
            }
        </div>
    </div>
</div>
<div id="custom-modal" class="modal-demo">
    <button type="button" class="close" onclick="Custombox.close();">
        <span>&times;</span><span class="sr-only">Close</span>
    </button>
    <h4 class="custom-modal-title">Employees</h4>
    <div class="custom-modal-text" id="AllEmployee" style="max-height:500px;overflow:auto;">

    </div>
</div>
@Scripts.Render("~/Content/css/customsweetjs")
<script>
    function EmployeeAdded(response) {
        swal({
            title: "Information",
            text: "Employee is saved successfully.",
            type: "success"
        }, function () {
            $('#btnAdd')[0].click();
        });
    }

    $(document).ready(function () {
        $('#frmEmployee').validate({
            // Specify the validation rules
            rules: {
                Name: "required",
                EmailId: {
                    required: true,
                    email: true,
                    remote: {
                        url: '@Url.Action("CheckDuplicateEmailId","Employee")',
                        data: { ID: $('#ID').val() },
                        type: "POST"
                    }
                },
                MobileNo: "required",
                UserName: {
                    required: true,
                    remote: {
                        url: '@Url.Action("CheckDuplicateUserName","Employee")',
                        data: { ID: $('#ID').val() },
                        type: "POST"
                    }
                },
                Password: "required",
                ConfirmPassword: {
                    required: true,
                    equalTo: "#Password"
                },
            },

            // Specify the validation error messages
            messages: {
                Name: "Please enter Full Name",
                EmailId: {
                    required: "Please enter Email Address.",
                    email: "Please enter proper email address.",
                    remote: "Email Id is already exist, Please enter another Email Id"
                },
                MobileNo: "Please enter Mobile Number",
                UserName: {
                    required: "Please enter User Name",
                    remote: "User name is already taken by someone else, Please enter another username."
                },
                Password: {
                    required: "Please enter Password"
                },
                ConfirmPassword: {
                    required: "Please enter Confirm Password",
                    equalTo: "Confirm Password doesnot matched with Password"
                }
            },

            submitHandler: function (form) {
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("Add","Employee")",
                    data: $('#frmEmployee').serialize(),
                    success: function (response) {
                        EmployeeAdded();
                    }
                });
                return false;
            }
        });
        $('#btnView').click(function () {
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetAll","Employee")",
                success: function (response) {
                    $('#AllEmployee').html(response);
                    Custombox.open({
                        animation: 'rotatedown',
                        plugin: 'custommodal',
                        overlayspeed: '100',
                        overlaycolor: '#36404a',
                        target: '#custom-modal'
                    });
                    $('body').on('dblclick', '#tblEmployee tbody tr', function () {
                        window.location.href = '@Url.Action("Add", "Employee", new { Id="REPLACE"})'.replace('REPLACE', $(this).data('empid'));
                    });
                }
            });

        });
        $('#btnDelete').click(function () {
            if ($('#ID').val() == "0") {
                swal("Please select any record First!", "In order to delete emplyee, You need to select an employee first.")
            }
            else {
                swal({
                    title: "Are you sure want to delete this employee?",
                    text: "You will not be able to recover this record!",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Yes, delete it!",
                    cancelButtonText: "No, cancel plz!",
                    closeOnConfirm: false,
                    closeOnCancel: false
                }, function (isConfirm) {
                    if (isConfirm) {
                        $.ajax({
                            type: "GET",
                            url: "@Url.Action("Delete","Employee")",
                            data: { ID: $('#ID').val() },
                            success: function (response) {
                                if (response.IsSuccess == true) {
                                    swal("Deleted!", "Employee is deleted Successfully.", "success");
                                    setTimeout(5000, function () {
                                        $('#btnAdd')[0].click();
                                    });
                                }
                                else {
                                    swal("Opssss!", "Something seems wrong while deleting employee.", "error");
                                }
                            }
                        });

                    } else {
                        swal("Cancelled", "Employee is safe :)", "error");
                    }
                });
            }
        });
    });
</script>